name: Upload Env Images
on:
  workflow_dispatch: {}
  push:
    paths:
      - 'images/build-env/Dockerfile'
      - 'images/dev-env/Dockerfile'
    branches:
      - master
      - release-*

jobs:
  build-specific-architecture:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
        image: [dev, build]
    outputs:
      image_tag: ${{ steps.image_tag.outputs.image_tag }}
    steps:
      - uses: actions/checkout@master

      - name: Extract Image Tag
        shell: bash
        run: |
          IMAGE_TAG=${GITHUB_REF##*/}
          if [ "${IMAGE_TAG}" = "master" ] ; then
            IMAGE_TAG=latest; 
          fi

          echo "::set-output name=image_tag::$(echo $IMAGE_TAG)"
        id: image_tag

      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@v1
        with:
          registry: dockerhub.io 
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Waterline Env
        env:
          IMAGE_TAG: ${{ steps.image_tag.outputs.image_tag }}
          ARCH: ${{ matrix.arch }}
          IMAGE: ${{ matrix.image }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
        run: |
          export IMAGE_${IMAGE^^}_ENV_BUILD=1

          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

          # ${VAR,,} convert VAR to lower case
          make -B IMAGE_BUILD_ENV_PROJECT=${GITHUB_REPOSITORY_OWNER,,} IMAGE_DEV_ENV_PROJECT=${GITHUB_REPOSITORY_OWNER,,} TARGET_PLATFORM=$ARCH IMAGE_TAG=$IMAGE_TAG-$ARCH image-$IMAGE-env

      - name: Upload Waterline Env
        env:
          IMAGE_TAG: ${{ steps.image_tag.outputs.image_tag }}
          ARCH: ${{ matrix.arch }}
          IMAGE: ${{ matrix.image }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
        run: |
          # ${VAR,,} convert VAR to lower case
          docker push dockerhub.io/${GITHUB_REPOSITORY_OWNER,,}/$IMAGE-env:$IMAGE_TAG-$ARCH

  upload-manifest:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: [dev, build]
    needs: build-specific-architecture
    steps:
      - name: Build Waterline manifest
        env:
          IMAGE: ${{ matrix.image }}
          IMAGE_TAG: ${{ needs.build-specific-architecture.outputs.image_tag }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
        run: |
          # ${VAR,,} convert VAR to lower case
          docker manifest create ghcr.io/${GITHUB_REPOSITORY_OWNER,,}/$IMAGE-env:$IMAGE_TAG \
            dockerhub.io/${GITHUB_REPOSITORY_OWNER,,}/$IMAGE-env:$IMAGE_TAG-amd64 \
            dockerhub.io/${GITHUB_REPOSITORY_OWNER,,}/$IMAGE-env:$IMAGE_TAG-arm64
          
          docker manifest annotate ghcr.io/${GITHUB_REPOSITORY_OWNER,,}/$IMAGE-env:$IMAGE_TAG \
            dockerhub.io/${GITHUB_REPOSITORY_OWNER,,}/$IMAGE-env:$IMAGE_TAG-amd64 \
            --os linux --arch amd64
          docker manifest annotate ghcr.io/${GITHUB_REPOSITORY_OWNER,,}/$IMAGE-env:$IMAGE_TAG \
            dockerhub.io/${GITHUB_REPOSITORY_OWNER,,}/$IMAGE-env:$IMAGE_TAG-arm64 \
            --os linux --arch arm64

      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@v1
        with:
          registry: dockerhub.io 
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Waterline Env
        env:
          IMAGE: ${{ matrix.image }}
          IMAGE_TAG: ${{ needs.build-specific-architecture.outputs.image_tag }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
        run: |
          # ${VAR,,} convert VAR to lower case
          docker manifest push dockerhub.io/${GITHUB_REPOSITORY_OWNER,,}/$IMAGE-env:$IMAGE_TAG
